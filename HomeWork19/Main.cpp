#include<iostream>
#include<cstdlib>
#include<ctime>
#include<algorithm> // для вызова функции std::sort().
// Прототип функции по нахождению наибольшего общего делителя двух чисел:
int largesCommonDivisor(int num1, int num2);
// Прототип функции, которая принимает число и возвращает его в отражённом виде:
int mirror_number(int num); // см. после блока main().

// Прототип функции по инициализации массива:
void initArray (int arr[], const int length);
// Прототип функции по выводу массива в консоль:
void showArray(int arr[], const int length); // см. после блока main().

// Прототип функции, которая принимает массив, его длину и число, после кот. необходимо выполнить сортировку элементов:
void sortArray(int arr[], const int length, int element);
// Прототип функции, которая принимает массив, его длину и два числа, в диапазоне кот. будут заполняться элементы в массиве:
void initRangeArray(int arr[], const int length, int left, int right);

int main() {
	setlocale(LC_ALL, "RU");
	int n, m;
	// Задача 1. Создайте функцию, которая принимает два числа и возвращает их наибольший общий делитель.
	std::cout << "Задача 1. Поиск наибольшего общего делителя из двух введеных чисел.\n";
	std::cout << "Введите два положительных числа -> ";
	std::cin >> n >> m;
	if (n == m || n < 0 || m < 0)	// При равентсве вводимых чисел или отрицательном значении, то вывести Ошибку ввода.
		std::cout << "Ошибка ввода!\n\n";
	else {
		std::cout << "Наибольший общий делитель " << n << " и " << m << " равен " << largesCommonDivisor(n, m) << "\n\n";
	}
	
	// Задача 2. Напишите функцию mirror_number, которая принимает число и возвращает его в отражённом виде.
	std::cout << "Задача 2. Вывод любого целого числа в обратном порядке\n";
	std::cout << "Введите число - ";
	std::cin >> n;
	if (mirror_number(n) == -1)		// Если функциия вернет значение "-1"(означает, что введено отрицательное число), то вывести ошибку ввода
		std::cout << "Ошибка ввода!\n";
	else
		std::cout << "Зеркальное число - " << mirror_number(n) << std::endl;
	std::cout << std::endl;
	// Задача 3. Создайте функцию, которая принимает массив, его длину и число N.
	// Функция возвращает первую позицию числа N в массиве, а также сортирует 
	// все элементы, которые находятся справа от N.
	std::cout << "Задача 3. Сортировка элементов в массиве после необходимого числа.\n";
	const int size3 = 10;	// создаем константу для указния кол-ва элементов.
	int arr3[size3]{};		// создаем нулевой массив с кол-вом элементов size3.
	std::cout << "Изначальный массив:\n";
	initArray(arr3, size3);
	showArray(arr3, size3);
	std::cout << "Введите число, после которого необходимо произвести сортировку элементов в массиве -> ";
	std::cin >> n;
	std::cout << "Отсортированный массив:\n";
	sortArray(arr3, size3, n);
	showArray(arr3, size3);
	std::cout << std::endl;
	// Задача 4. Создайте функцию, которая принимает пустой массив, его длину и два числа A и B,
	//  которые являются началом и концом диапазона. Функция должна заполнять массив случайными числами из
	//  указанного диапазона.
	std::cout << "Задача 4. Заполнение массива в требуемом диапазоне.\n";
	std::cout << "Введите два числа для задания диапазона -> ";
	std::cin >> n >> m;
	const int size4 = 10;
	int arr4[size4]{};		// создаем нулевой массив с кол-вом элементов size4.
	if (n == m)		// при равенстве двух вводимых чисел, вывести в консоль ошибку ввода.
		std::cout << "Ошибка ввода!";
	else {
		if (m > n)		// увеличим второе число, чтобы оно входило в диапазон.
			m++;
		else if (n > m) {		// если первое введенное число меньше второго,
			std::swap(n, m);	// то поменяем их местами,
			m++;				// также увеличим второе число, чтобы оно входило в диапазон.
		}
		// соответсвенно, в функцию initRangeArray() передадим массив, его длину и два числа (диапазон - сначала меньшее число, потом большее).
		initRangeArray(arr4, size4, n, m);
		showArray(arr4, size4);
	}
	return 0;
}
// функция по нахождению наибольшего общего делителя (НОД) двух чисел:
int largesCommonDivisor(int num1, int num2) {
	
	int divisible = num1 > num2 ? num1 : num2;	// Присвоим делимому (devisible) максимальное значение из двух вводимых чисел.
	int divisor = num2 < num1 ? num2 : num1;	// Присвоим делителю (devisor) минимальное значение из двух вводимых чисел
	int remainder;		// создадим переменную остатка
	for (int i = 0; ; i++) {	// Запускаем цикл для нахождения НОД по алгоритму Евклида.
		// Принцип алгоритма: Большее число поделим на меньшее -> меньшее число поделим на остаток, кот. получился после деления ->
		// -> первый остаток поделим на второй остаток -> второй остаток поделим на третий и т.д. до тех пор,
		// пока в остатке не получится ноль. Последний делитель (devisor) и есть НОД.
		remainder = divisible % divisor;	
		if (remainder == 0)		// условие для выхода из цикла (когда остаток будет равен нулю).
			return divisor;		// возвращаем последний делитель.
		divisible = divisor;	
		divisor = remainder;
	}
}
// Функция, которая принимает число и возвращает его в отражённом виде:
int mirror_number(int num1) {
	int num2 = 0;
	if (num1 >= 0 && num1 < 10)		// Если введено число от 0 до 9 включительно, то завершить функцию и вернуть значение введенного числа.
		return num1;
	else if (num1 < 0)		// Если введенное число отрицательное, то завершить функцию и вернуть значение -1.
		return -1;
	// В остальных случаях запускаем цикл, в кот. к переменной num2 добавляем числа с конца исходного числа и при каждой итерации добавляем разряд.
	else
		for (int i = 1; ;i *= 10) {
			num2 += (num1 / i) % 10;
			if (i > num1) {		// условие для выхода из цикла,
				num2 /= 10;		// также избавляеися от лишнего нолика.
				break;
			}
			num2 *= 10;
		}
	return num2;
}
// Функция по инициализации массива:
void initArray(int arr[], const int length) {
	srand(time(NULL));		// запускаем генератор случайных чисел.
	for (int i = 0; i < length; i++)	// перебираем каждый элемент в массиве
		arr[i] = rand() % 10;			// и присваиваем каждому значение в диапазоне 0..9.
}
// Функция по выводу массива в консоль:
void showArray(int arr[], const int length) {
	std::cout << "{ ";
	for (int i = 0; i < length; i++)	// перебираем каждый элемент в массиве
		std::cout << arr[i] << ", ";	// и выводим изх в консоль.
	std::cout << "\b\b }" << std::endl;
}
// Функция, которая принимает массив, его длину и число, после кот. необходимо выполнить сортировку элементов:
void sortArray(int arr[], const int length, int element) {
	for (int x = 0; x < length; x++)	// перебираем каждый элемент в массиве. При нахождении первого элемента равному переменной element
		if (arr[x] == element) {		// , фиксируем индекс (x) этого элемента и выполняем пузырьковую сортировку всех чисел, находящихся после него.
			// Пузырьковая сортировка:				Также помним о быстрой сортировке (std::sort(arr, arr + size))
			for (int i = length - 1; i > x; i--)
				for (int j = x + 1; j < i; j++)		// сортировку начинаем с элемента, позиция кот. равно х+1.
					if(arr[j] > arr[j+1])				// Если левый элемент в массиве больше правого,
						std::swap(arr[j], arr[j + 1]);	// то поменять их местами.
			break;
		}
}
// Функция, которая принимает массив, его длину и два числа, в диапазоне кот. будут заполняться элементы в массиве:
void initRangeArray(int arr[], const int length, int left, int right) {
	srand(time(NULL));		// запускаем генератор случайных чисел.
	for (int i = 0; i < length; i++)				// перебираем каждый элемент в массиве
		arr[i] = rand() % (right - left) + left;	// и присваиваем каждому значение в диапазоне от left до right включительно.
}